<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.sukbak.JooJoinMapper">
	
	<!-- admin page 페이징을 위한 카운트 -->
	<select id="jhUserTotal" resultType="int">
		select Count(*) from users
	</select>
	<select id="jhAccomTotal" resultType="int">
		select Count(*) from accom
	</select>
	<select id="jhQnaTotal" resultType="int">
	   select COUNT(*) 
			from qna q, qna_re r
			WHERE q.qna_id = r.qna_id
		<!-- select Count(*) from qna -->
	</select>
	<select id="jhQnaReTotal" resultType="int">
		select Count(*)
		from qna q, qna_re r
		where q.qna_id = r.qna_id(+)
		and r.reply is null
	</select>
	<select id="jhReviewTotal" resultType="int">
		select Count(*) from review
	</select>
	<select id="jhReviewDelTotal" resultType="int">
		select Count(*) from review where del_request = 'Y'
	</select>
	
	<!-- admin page user list 불러오기  -->
	<select id="jhUserlist" resultType="JooJoin" parameterType="JooJoin">
		select *
		from(
			select rownum rn , a.*
			from (select * from Users order by name) a)
		where rn BETWEEN #{start} and #{end}
	</select>
	
	<!-- admin page accom list 불러오기  -->
	<select id="jhAccomlist" resultType="JooJoin" parameterType="JooJoin">
		select *
		from(
			select rownum rn , a.*
			from(select * from accom
				 order by biz_name)a)
		where rn BETWEEN #{start} and #{end}
	</select>
	
	<!-- admin page qna list 전체 불러오기  -->
	<select id="jhQnalist" resultType="JooJoin" parameterType="JooJoin">
		select *
		from(
		    select rownum rn, a.*
			from(select q.qna_id, q.user_id, q.qna_date, 
			       q.qna_type, q.qna_title, q.qna_content, r.reply 
				from qna q, qna_re r
				WHERE q.qna_id = r.qna_id
				order by qna_date desc) a )
		where rn BETWEEN #{start} and #{end}
	</select>
	
	<!-- admin page 답변 없는 qna list 불러오기  -->
	<select id="jhQnaRelist" resultType="JooJoin" parameterType="JooJoin">
		select *
		from(
		    select rownum rn, a.*
			from(select  q.qna_id, q.user_id, q.qna_type, q.qna_title, q.qna_content, q.qna_date
				from qna q, qna_re r
				where q.qna_id = r.qna_id(+)
				and r.reply is null
				order by qna_date desc) a)
		where rn BETWEEN #{start} and #{end}
	</select>
	
	<!-- admin page review list 불러오기  -->
	<select id="jhReviewlist" resultType="JooJoin" parameterType="JooJoin">
		select *
		from(
		    select rownum rn , a.*
		    from(select r.*, p.user_id, p.biz_id
		         from review r, payment p
		         where r.pay_id = p.pay_id
		         order by review_date desc) a)
		where rn BETWEEN #{start} and #{end}
	</select>
	
	<!-- admin page review 삭제 요청 들어온 list 만 불러오기  -->
	<select id="jhReviewDellist" resultType="JooJoin" parameterType="JooJoin">
		select *
		from(
		    select rownum rn , a.*
		    from(select r.*, p.user_id, p.biz_id
		         from review r, payment p
		         where del_request = 'Y'
		         AND r.pay_id = p.pay_id
		         order by del_date desc) a)
		where rn BETWEEN #{start} and #{end}
	</select>
	
	<!-- Users 테이블 한 row 비활성화 -->
	<update id="adminDeleteUser" parameterType="JooJoin">
		UPDATE users SET user_status = 'deactivated' WHERE user_id = #{user_id}
	</update>
	
	<!-- Accom 테이블 한 row 비활성화 -->
	<update id="adminDeleteAccom" parameterType="JooJoin">
		UPDATE accom SET accom_avail = '230' WHERE biz_id = #{biz_id}
	</update>
	
	<!-- QnA Reply 하나 삭제 -->
	<delete id="adminDeleteQnARe" parameterType="int">
		DELETE FROM qna_re WHERE qna_id = #{qna_id}
	</delete>
	
	<!-- QnA 하나 삭제 -->
	<delete id="adminDeleteQnA" parameterType="int">
		DELETE FROM qna WHERE qna_id = #{qna_id}
	</delete>
	
	<!-- QnA Reply Form 불러오기 -->
	<select id="jhQnaSelOne" parameterType="int" resultType="JooJoin">
		Select * From qna WHERE qna_id = #{qna_id}
	</select>
	
	<!-- QnA Reply 저장하기 -->
	<insert id="jhInsertQnaRe" parameterType="JooJoin">
		Insert into qna_re values (#{qna_id}, #{user_id}, #{reply}, sysdate)
	</insert>
	
	<!-- Review_img 테이블 한 row 삭제 -->
	<delete id="adminDeleteReviewImg" parameterType="int">
		DELETE FROM review_img WHERE pay_id = #{pay_id}
	</delete>
	
	<!-- Review 테이블 한 row 삭제 -->
	<delete id="adminDeleteReview" parameterType="int">
		DELETE FROM review WHERE pay_id = #{pay_id}
	</delete>
	
	<!-- Review 삭제 요청 반려 -->
	<update id="adminRejectDelReview" parameterType="JooJoin">
		UPDATE review SET del_request = 'R' WHERE pay_id = #{pay_id}
	</update>
	
	<!-- QnA 테이블 전체 조회 -->
	<select id="adminQnAListAll" resultType="JooJoin">
	  SELECT q.qna_id, q.user_id, q.qna_type, q.qna_title,
	          q.qna_content, r.reply
	  FROM qna q, qna_re r 
	  WHERE q.qna_id = r.qna_id
	</select>
	
	<!-- Review 테이블 전체 조회 -->
	<select id="adminReviewListAll" resultType="JooJoin">
      SELECT * FROM review
   </select> 
	
	<!-- Event 테이블 전체 조회 -->
	<select id="adminEventListAll" resultType="JooJoin">
      SELECT * FROM event
   </select> 
	
	<!-- Notice 테이블 전체 조회 -->
	<select id="adminNoticeListAll" resultType="JooJoin">
      SELECT * FROM notice_faq
   </select> 
	
	<!-- User 일반 회원 관리에서 검색 -->
	<select id="condUserCnt" parameterType="JooJoin" resultType="int">
		select Count(*) FROM users
		WHERE 
		<choose>
			<when test="search == 's_user_id'">
				user_id like '%' || #{keyword} || '%'
			</when>
			<when test="search == 's_name'">
				name like '%' || #{keyword} || '%'
			</when>
			<otherwise>
				user_id like '%'
			</otherwise>
		</choose>
	</select> 
	
	<!-- User 일반 회원 관리 검색 결과를 출력 및 페이징 -->
	<select id="jhUserSearchList" parameterType="JooJoin" resultType="JooJoin">
		SELECT *
		FROM (
			SELECT rownum rn, a.*
			FROM (
				SELECT *
				FROM users
				WHERE
					<choose>
						<when test="search == 's_user_id'">
							user_id like '%' || #{keyword} || '%'
						</when>
						<when test="search == 's_name'">
							name like '%' || #{keyword} || '%'
						</when>
						<otherwise>
							1 = 1
						</otherwise>
					</choose>
				ORDER BY name
			) a
		)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>

	
</mapper>